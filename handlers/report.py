"""FSM‚Äë—Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—á—ë—Ç–∞ –æ –≤–∏–∑–∏—Ç–µ."""
from aiogram import Router, F
from aiogram.enums import ContentType       
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.exceptions import TelegramBadRequest

from keyboards.report import marketing_kb

router = Router()

class Report(StatesGroup):
    GEO = State()
    PHOTO = State()
    MARKETING = State()
    INTERVIEW = State()
    SHARE = State()
    COMPETITORS = State()
    COMMENT = State()
    FINISH = State()

@router.callback_query(F.data == "start_report")
async def start_report(call: CallbackQuery, state: FSMContext):
    await state.set_state(Report.GEO)
    await call.message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞ (–∫–Ω–æ–ø–∫–∞ —Å–∫—Ä–µ–ø–∫–∞ -> –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è).")

@router.message(Report.GEO, F.content_type == ContentType.LOCATION)
async def geo_received(msg: Message, state: FSMContext):
    await state.set_state(Report.PHOTO)
    await msg.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ 1‚Äì2 —Ñ–æ—Ç–æ –≤–∏—Ç—Ä–∏–Ω—ã —Å —Ä–µ–∫–ª–∞–º–æ–π –û–¢–ü")

@router.message(Report.PHOTO, F.content_type == ContentType.PHOTO)
async def photo_received(msg: Message, state: FSMContext):
    await state.set_state(Report.MARKETING)
    await msg.answer("–ï—Å—Ç—å –ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –û–¢–ü –Ω–∞ –º–µ—Å—Ç–µ?", reply_markup=marketing_kb())

@router.callback_query(Report.MARKETING, F.data.startswith("mkt_"))
async def marketing_answer(call: CallbackQuery, state: FSMContext):
    await state.update_data(marketing=call.data)
    await state.set_state(Report.INTERVIEW)
    await call.message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç –∫—Ä–µ–¥–∏—Ç —á–µ—Ä–µ–∑ –û–¢–ü? (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç)")

@router.message(Report.INTERVIEW)
async def interview_answer(msg: Message, state: FSMContext):
    await state.update_data(interview=msg.text)
    await state.set_state(Report.SHARE)
    await msg.answer("–ö–∞–∫—É—é –¥–æ–ª—é –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –û–¢–ü —Å–µ–≥–æ–¥–Ω—è? (–≤ %)")

@router.message(Report.SHARE)
async def share_answer(msg: Message, state: FSMContext):
    await state.update_data(share=msg.text)
    await state.set_state(Report.COMPETITORS)
    await msg.answer("–ö–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª—è—é—Ç –∫—Ä–µ–¥–∏—Ç—ã? –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

@router.message(Report.COMPETITORS)
async def competitors_answer(msg: Message, state: FSMContext):
    await state.update_data(competitors=msg.text)
    await state.set_state(Report.COMMENT)
    await msg.answer("–ß—Ç–æ –µ—â—ë –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å? (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)")

@router.message(Report.COMMENT)
async def comment_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = msg.text
    # TODO: persist to DB via session in data["session"]
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
    await state.clear()