" FSM‚Äë—Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—á—ë—Ç–∞ –æ –≤–∏–∑–∏—Ç–µ. "
from aiogram import Router, F
from aiogram.enums import ContentType      
from aiogram.filters import Command 
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ContentType

from collections import defaultdict

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.report import marketing_kb, get_tasks_kb, continue_kb
from models import Visit, Task, Partner, Report as ReportORM, User
from models.enums import TaskStatus, Marketing
from .start import cmd_start

router = Router()

class Report(StatesGroup):
    CONTINUE = State()
    PHOTO = State()
    MARKETING = State()
    INTERVIEW = State()
    SHARE = State()
    COMPETITORS = State()
    COMMENT = State()
    FINISH = State()

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext, session: AsyncSession):
    await state.clear()
    await message.answer("–û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω")
    await cmd_start(message, session)

@router.callback_query(F.data == "start_report")
async def start_report(call: CallbackQuery, state: FSMContext):
    msg = await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—á—ë—Ç–∞: ", reply_markup=await get_tasks_kb())
    await state.update_data(base_msg=msg)

@router.callback_query(F.data.startswith("task_"))
async def task_selected(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    prev_msg: Message = await state.get_value("base_msg")
    await prev_msg.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ...")
    task_id = int(call.data.split("_")[1])
    stmt = (
        select(Task, Partner)
        .join(Partner, Task.partner_id == Partner.id)
        .where(Task.id == task_id)
    )
    rows = (await session.execute(stmt)).first()    # list[tuple[Task, Partner]]
    if rows and rows[0].status == TaskStatus.IN_PROGRESS:
        task: Task = rows[0]
        partner: Partner = rows[1]
        await prev_msg.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task.task_type}\n"
            f"–ü–∞—Ä—Ç–Ω—ë—Ä: {partner.name}\n"
            f"–ê–¥—Ä–µ—Å: {partner.address}\n"
            f"–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞: {partner.contact_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {partner.contact_phone}\n"
            f"–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)",
            reply_markup=continue_kb()
        )
        await state.update_data(task_id=task.id)
        await state.update_data(partner_id=partner.id)
        await state.set_state(Report.CONTINUE)
    else:
        await prev_msg.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    

@router.callback_query(Report.CONTINUE, F.data.startswith("continue_"))
async def continue_report(call: CallbackQuery, state: FSMContext):
    prev_msg: Message = await state.get_value("base_msg")
    if call.data == "continue_yes":
        await prev_msg.edit_text("–û—Ç—á—ë—Ç –æ –≤–∏–∑–∏—Ç–µ –Ω–∞—á–∞—Ç")
        await state.set_state(Report.PHOTO)
        await call.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ 1‚Äì2 —Ñ–æ—Ç–æ –≤–∏—Ç—Ä–∏–Ω—ã —Å —Ä–µ–∫–ª–∞–º–æ–π –û–¢–ü")
    else:
        await prev_msg.edit_text("–û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        await cmd_start(call.message)


_album_cache: dict[str, list[str]] = defaultdict(list)

@router.message(Report.PHOTO, F.content_type == ContentType.PHOTO)
async def photo_received(msg: Message, state: FSMContext):

    best_id = msg.photo[-1].file_id            # –Ω–∞–∏–ª—É—á—à–∏–π —Ä–∞–∑–º–µ—Ä :contentReference[oaicite:0]{index=0}

    if msg.media_group_id:                     # ‚Üê –∞–ª—å–±–æ–º
        bucket = _album_cache[msg.media_group_id]   # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫
        bucket.append(best_id)

        if len(bucket) < 2:                    # –∂–¥—ë–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ
            return

        photos = bucket[:2]                    # 1 –∏–ª–∏ 2 file_id
        _album_cache.pop(msg.media_group_id, None)  # —á–∏—Å—Ç–∏–º –∫—ç—à
    else:                                      # ‚Üê –æ–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        photos = [best_id]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id-—ã –≤ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    await state.update_data(photos=photos)
    await state.set_state(Report.MARKETING)
    await msg.answer(
        "–ï—Å—Ç—å –ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –û–¢–ü –Ω–∞ –º–µ—Å—Ç–µ?",
        reply_markup=marketing_kb(),
    )


@router.callback_query(Report.MARKETING, F.data.startswith("mkt_"))
async def marketing_answer(call: CallbackQuery, state: FSMContext):
    await state.update_data(marketing=call.data.split("_")[1])
    await state.set_state(Report.INTERVIEW)
    await call.message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç –∫—Ä–µ–¥–∏—Ç —á–µ—Ä–µ–∑ –û–¢–ü? (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç)")

@router.message(Report.INTERVIEW)
async def interview_answer(msg: Message, state: FSMContext):
    await state.update_data(interview=msg.text)
    await state.set_state(Report.SHARE)
    await msg.answer("–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–∑—è–ª–∏ –∫—Ä–µ–¥–∏—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ? (—á–∏—Å–ª–æ)")

@router.message(Report.SHARE)
async def share_answer(msg: Message, state: FSMContext):
    await state.update_data(share=msg.text)
    await state.set_state(Report.COMPETITORS)
    await msg.answer("–ö–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª—è—é—Ç –∫—Ä–µ–¥–∏—Ç—ã? –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

@router.message(Report.COMPETITORS)
async def competitors_answer(msg: Message, state: FSMContext):
    await state.update_data(competitors=msg.text)
    await state.set_state(Report.COMMENT)
    await msg.answer("–ß—Ç–æ –µ—â—ë –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å? (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)")

@router.message(Report.COMMENT)
async def comment_answer(msg: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    data["comment"] = msg.text
    temp_msg = await msg.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞...")

    report = ReportORM(
        photos_list=",".join(data["photos"]),
        marketing=Marketing(data["marketing"]).value,
        interview=data["interview"],
        share=int(data["share"]),
        competitors=data["competitors"],
        comment=data["comment"],
        task_id=data["task_id"],
    )
    session.add(report)
    await session.flush()

    repr_id = select(User.id).where(User.telegram_id == msg.from_user.id)
    visit = Visit(
        rep_id=repr_id,
        partner_id=data["partner_id"],
        visited_at=msg.date,
        notes=data["comment"],
        report_id=report.id,
    )
    session.add(visit)
    await session.commit()

    await temp_msg.edit_text("–°–ø–∞—Å–∏–±–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
    await state.clear()
